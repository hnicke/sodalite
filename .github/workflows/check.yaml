name: CI
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
jobs:
  check:
    name: Lint, type-check and test the code base
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9.2'

      - name: Install poetry
        uses: abatilo/actions-poetry@v2.1.0
        with:
          poetry-version: 1.1.7

      - name: Install dependencies
        run: make deps

      - name: Lint
        run: make lint

      - name: Type-Check
        id: type-check
        run: |
          make type-check
          export TYPE_COVERAGE=$(make type-coverage)
          echo "::set-output name=TYPE_COVERAGE::$TYPE_COVERAGE"

      - name: Run tests
        run: make test

      # see https://github.com/marketplace/actions/dynamic-badges
      - name: Create type coverage badge
        # if: github.ref == 'refs/head/master'
        uses: schneegans/dynamic-badges-action@v1.0.0
        with:
          auth: ${{ secrets.GIST_SECRET }}
          gistID: dfd1ab3f3a19522e0d2b0c94c409ba78
          filename: sodalite-type-coverage.json
          label: typing
          message: ${{ steps.type-check.outputs.TYPE_COVERAGE }}%
          color: orange
  release:
    needs: check
    if: github.event_name == 'push' && github.ref == 'refs/heads/master' && !contains(github.event.head_commit.message, 'chore(release):')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          token: ${{ secrets.ADMIN_GITHUB_TOKEN }}
      - name: Semantic Release
        run: |
          pip install python-semantic-release
          git config user.name github-actions
          git config user.email github-actions@github.com
          semantic-release publish
        env:
          GH_TOKEN: ${{ secrets.ADMIN_GITHUB_TOKEN }}
          PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
