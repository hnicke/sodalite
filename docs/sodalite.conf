##############################
### sodalite configuration ###
##############################

## modifier keys
# 'Control-a' must be written as 'ctrl a'
# 'Alt-a' must be written as 'meta a'

## special keys
# these special keys can be specified:
# - enter, esc, f1, f2..

keymap:
## global
  #exit: 'enter'
  #abort: 'ctrl c'
  #navigate_mode: 'esc'
  #assign_mode: '='
  #operate_mode: ' '
  #filter: '/'
  #toggle_dotfiles: 'meta h'
  #scroll_page_down: 'ctrl f'
  #scroll_page_up: 'ctrl b'
  #scroll_half_page_down: 'ctrl d'
  #scroll_half_page_up: 'ctrl u'
  #yank_current_path: 'ctrl y'
## navigate mode
  #go_to_home: ';'
  #go_to_root: ','
  #go_to_parent: '.'
  #go_to_previous: 'ctrl h'
  #go_to_next: 'ctrl l'
## assign mode
  #select_next: 'ctrl n'
  #select_previous: 'ctrl p'
## operate mode
  #yank: 'y'
  #paste: 'p'
  #delete: 'd'
  #rename: 'r'

# These entries are given preference both for automatic key assignment
# and entry sorting -- first listed entries are more important.
# Note: This mechanism is case insensitive
preferred_names: [ usr, local, .local, .config, share, etc, bin, downloads, documents, music, pictures, videos, desktop]

##############
# variables ################################################################
# following variables can be used within hooks. they are expanded at runtime:
# $entry    current entry (filename or dirname)
# #q        if hook ends with #q, sodalite will execute the hook and exit
#           example: vim "$entry"#q
#           this is useful if the hook is designed to serve as a launcher.
#           If the app spawns in another window (like all x apps),
#           consider spawning the process in the background
#           in order for sodalite to exit immediately.
#           Example: zathura "$entry" &#q

hooks:
  general:
  dir:
    ctrl s: 'termite --directory="$entry"&'
    ctrl o:
      action: 'sodalite-open "$entry" 2> /dev/null'
  file:
    o:
      action: 'sodalite-open "$entry" 2> /dev/null'
      label: open
  plain_text:
  executable:
    e:
      action: 'exec "$entry"'
      label: execute
  custom:
    archive:
      extensions: [xz]
      hooks:
        u:
          action: 'tar xvzf "$entry"'
          label: extract
    zip-archive:
      extensions: [zip]
      hooks:
        u:
          action: 'unzip "$entry"'
          label: unzip
